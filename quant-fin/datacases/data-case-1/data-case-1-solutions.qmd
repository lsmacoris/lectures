---
title: "Data Case I - Investing in the Pharmaceutical Industry"
author: "Lucas S. Macoris (FGV-EAESP)"
format:
  html:
    page-layout: full
editor: visual
---

# About

This Data Case is part of the *Practical Applications in Quantitative Finance* course, held at FGV-EAESP's undergraduate course in business. Carefully follow the instructions contained in the data case as well as *eClassÂ®* before you make your submission.

## Case Outline

The pharmaceutical industry is a critical sector in financial markets, influenced by regulatory approvals, drug developments, and global health events. In this first *Data Case*, you will analyze stock performance for a set of 10 pharmaceutical companies over time, applying the `tidyverse` and `tidyquant` packages to extract and interpret insights from the data.

You are a junior analyst at Atlas Capital, a leading buyside investment firm specializing in sector-focused strategies. The firm is considering increasing its exposure to the pharmaceutical industry, given its long-term growth potential and resilience in volatile markets. In the latest investment committee meeting, your fund manager raised an important question: *"How has the pharmaceutical industry performed over time? We need to identify whether now is the right time to increase our position."*

Your team has been tasked with conducting an in-depth financial analysis of the pharmaceutical sector. The goal is to assess industry-wide trends, identify risks and opportunities, and ultimately recommend an investment stance. More specifically, your task will involve:

-  Collecting stock price data and compute returns
-  Visualizing key trends in returns and volatility
-  Interpreting findings and suggest investment insights

To streamline our research, you will focus on the 10 largest publicly traded pharmaceutical companies in the U.S, analyze their performance, risks, and potential catalysts that could drive returns in the near future. As of February 2025, the 10 largest pharmaceutical companies traded in the U.S., along with their ticker symbols, are:

1.  **Eli Lilly and Co. (LLY)**: A leading pharmaceutical company known for its innovative treatments in diabetes and oncology.
2.  **Novo Nordisk A/S (NVO)**: Specializing in diabetes care, Novo Nordisk has a significant presence in the U.S. market.
3.  **Johnson & Johnson (JNJ)**: A diversified healthcare company with a strong pharmaceutical division.
4.  **AbbVie Inc. (ABBV)**: Known for its immunology and oncology products, AbbVie is a major player in the pharmaceutical industry.
5.  **Merck & Co., Inc. (MRK)**: Merck offers a wide range of prescription medicines, vaccines, and therapies.
6.  **Pfizer Inc. (PFE)**: A global pharmaceutical corporation recognized for its vaccines and therapeutics.
7.  **Bristol-Myers Squibb Company (BMY)**: Focused on oncology, cardiovascular, and immunology, Bristol-Myers Squibb is a key industry player.
8.  **AstraZeneca PLC (AZN)**: A biopharmaceutical company with a strong portfolio in oncology and respiratory diseases.
9.  **Amgen Inc. (AMGN)**: Specializing in biotechnology, Amgen develops therapies for serious illnesses.
10. **Gilead Sciences, Inc. (GILD)**: Known for its antiviral drugs, Gilead has a significant market presence.

Now, itâ€™s up to you and your team to dive into the data, extract key insights, and present your data-driven investment thesis. Good luckâ€”your next career milestone at Atlas Capital depends on it. ðŸš€

::: callout-important
### Deliverable

Each group is expected to deliver a single assignment. A submission must be either an `.R` script or a `.qmd` (Quarto) file, **ensuring that both code and interpretations of the results are clearly presented**. Whenever applicable, include concise explanations alongside your code to demonstrate your understanding of the analysis. The due date for this submission is specified on *eClassÂ®*, so please check the platform for details. You are required to clearly document your workflow and assumptions, and provide meaningful explanations alongside your outputs.

To help you structure your submission, I have provided a Quarto mock template, which is already available for you to use. This template is designed to help you seamlessly integrate your code and analysis, ensuring a clear and organized presentation of your work. Feel free to use it as a starting point to format your responses effectively. The mock template can be found in the *Data Cases* folder on *eClassÂ®*.
:::

## Tech-setup

Before you start, make sure that you have your `R` session correctly configured with all the following packages by running the code below:

```{r}
#| warning: false
#| message: false

# Package names
packages <- c("tidyverse","tidyquant","tidymodels","xts", "glue","scales", "ggthemes","ggcorrplot")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())

if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Load all packages
invisible(lapply(packages, library, character.only = TRUE))
```

Alternatively, you can simply call:

```{r}
#| eval: false #I don't want R to evaluate this code; it is just for presentation purposes
#| echo: true #I want this code chunk to display on the Quarto Document

#Install if not already available
  install.packages('tidyverse')
  install.packages('tidyquant')
  install.packages('glue')
  install.packages('scales')
  install.packages('ggthemes')

#Load
  library(tidyverse)
  library(tidyquant)
  library(tidymodels)
  library(glue)
  library(scales)
  library(ggthemes)
  
```

## Exercise 1

Use the `tq_get()` function from the `tidyquant` package to retrieve historical adjusted closing prices for the 10 largest publicly traded pharmaceutical companies in the U.S. from *Yahoo! Finance*. Your dataset should cover the period from *January 1, 2020*, to *December 31, 2024*. Using the functions from the `tidyverse`, ensure that your data includes only the timestamp column, as well as the column that contains the daily adjusted stock price information. Store this into an object called `financial_data` (or something similar). Store this data set for all the subsequent analysis - make sure not to override this dataset as you move along the data case to make sure you are always referring to the raw data pull!

```{r}
#| warning: false
#| message: false

#Define the list of assets
assets <- c('LLY','NVO','JNJ','ABBV','MRK','PFE','BMY','AZN','AMGN','GILD')
start_date <- '2020-01-01'
end_date <- '2024-12-31'

financial_data=assets%>%
  tq_get(from=start_date,
         to= end_date)%>%
  select(date,symbol,adjusted)
  
```

## Exercise 2

Using the `tidyquant` package, use the  object you've just created with the `tq_transmute` function to compute the yearly returns for each stock over the analysis period. More specifically, pass the `yearlyReturn` function to adjusted column using the `tq_transmute`, labeling this new variable as `yearly_return`. Arrange your dataset by year and in descending order of `yearly_return` (highest-to-lowest). Store this into a new object called, for example, `yearly_returns`. Which stock had the highest return in 2024, and which one had the lowest? Prompt the results in your session.

```{r}
#| warning: false
#| message: false

yearly_returns=financial_data%>%
  group_by(symbol)%>%
  tq_transmute(select = adjusted,
               mutate_fun = yearlyReturn,
               col_rename = 'yearly_return')%>%
  arrange(year(date),desc(yearly_return))

#Full analysis
yearly_returns

#Best and worst performance
yearly_returns%>%
  #Ungroup the data to make sure calculations are done rowwise
  ungroup()%>%
  #Select only the last year
  filter(year(date)==2024)%>%
  #Select only the 1st and 10th 
  filter(rank(yearly_return) %in% c(1,10))

```

## Exercise 3

With your `data.frame` containing the yearly returns over time for each stock, use `ggplot` to create a line chart of the historical cumulative returns for each stock during the study period. Which stock had the highest cumulative return up-to-date? Recall that cumulative returns can be calculated from period returns as:

$$
\text{Cumulative Return}= (1+R_1)\times(1+R_2)\times ... \times(1+R_T)-1\equiv \prod (1+R_t)-1
$$

Your chart should map `date` to the x-axis, the yearly return variable to the `y` axis, and group the results by `symbol`. To make sure that you are plotting a line chart, use the `geom_line()` function after you have mapped your data. In addition to these two layers, add any customizations that you believe that are beneficial to convey the message - see the Data Visualization

::: callout-tip
### Hint

1.  With the `data.frame` you created to store yearly returns, group by `symbol`, and use `tq_transmute()` to apply the `Return.cumulative` function to the data.
2.  Now, your resulting `data.frame` contains the cumulative returns for all stocks. You can adjust the column names with the `setNames()` function and pipe that into a `ggplot` call, mapping the `symbol` to the x-axis, the cumulative return column to the y-axis, and the `geom_col()` function to create a bar chart. Add as many customizations you think are worth the effort.
:::

```{r}
#| warning: false
#| message: false

yearly_returns%>%
  group_by(symbol)%>%
  tq_transmute(select = yearly_return,
               mutate_fun = Return.cumulative)%>%
  setNames(c('symbol','cum_returns'))%>%
  ggplot(aes(x=reorder(symbol,desc(cum_returns)),y=cum_returns,fill=symbol))+
  geom_col()+
  geom_text(aes(label=percent(cum_returns),vjust=-1))+
  theme_minimal()+
  labs(x='Stocks',
       y='Cumulative Return',
       title='A comparison of individual cumulative returns from selected stocks',
       subtitle = 'Source: Yahoo! Finance')+
  scale_y_continuous(labels=percent,limits = c(-0.5,6))+
  theme(legend.position = 'none')
  
  
```

## Exercise 4

After reviewing your initial analysis, your fund manager at *Atlas Capital* liked the idea of examining yearly returns to get a broader perspective on performance. However, they pointed out that pharmaceutical companies vary significantly in terms of risk exposure, so itâ€™s crucial to account for volatility as well. To complement the analysis, use the same rationale from the previous exercise to calculate the yearly volatility for each stock. How do the risk levels differ between firms? Store your results in a new object and prompt it in your session.

::: callout-tip
### Hint

As opposed to the `yearlyReturn` function, the `tidyquant` package does not have a pre-built `dailyStdev` function. Instead, what you can do is to use a combination of functions to get the expected result:

1.  First, use `tq_transmute()` to calculate daily returns passing the `dailyReturn` function
2.  Now, your resulting `data.frame` contains daily returns for all stocks. It is now in a convenient format to chain this object again, in another `tq_transmute()` function, applying the `StdDev.annualized` function and assign to a new object, like `yearly_volatility`. Note, however, that if you simply use `StdDev.annualized`, it will calculate an annualized metric for each stock for the whole period, which is not what you want.

To make sure that you have calculating the annualized standard deviation for each year, you can do a composition of `apply.yearly`, which applies a given function at yearly intervals, and `StdDev.annualized`, using the following syntax:

```{r}
#| eval: false
#| echo: TRUE

your_daily_return_object%>%
  tq_transmute(select = daily_return,
               mutate_fun = apply.yearly,
               FUN=StdDev.annualized,
               col_rename = 'yearly_volatility')
```

Here, `tq_transmute()` will apply the function defined in `FUN` over each interval.
:::

```{r}
#| warning: false
#| message: false

yearly_volatility=financial_data%>%
  group_by(symbol)%>%
  tq_transmute(select = adjusted,
               mutate_fun = dailyReturn,
               col_rename = 'daily_return')%>%
  tq_transmute(select = daily_return,
               mutate_fun = apply.yearly,
               FUN=StdDev.annualized,
               col_rename = 'yearly_volatility')

#Full analysis
yearly_volatility

#Best and worst performance
yearly_volatility%>%
  #Ungroup the data to make sure calculations are done rowwise
  ungroup()%>%
  #Select only the last year
  filter(year(date)==2024)%>%
  #Select only the 1st and 10th 
  filter(rank(yearly_volatility) %in% c(1,10))

```

## Exercise 5

Building on your previous findings, since some companies exhibit higher returns but also greater risk, it might be a good idea to add a risk-adjusted performance metric to the analysis. The *Sharpe ratio* for stock $i$ in period $t$ measures the risk-adjusted return of an asset and is calculated as:

$$
\text{Sharpe Ratio}_{i,t}=\dfrac{R_{i,t}-R_{f,t}}{\sigma_{i,t}},
$$

where $R_{i,t}$ is the return of a given stock $i$ in period $t$, $R_{f,t}$ is the risk-free return for the same period, and $\sigma_{i,t}$ is the volatility for stock $i$ in period $t$.

Your task is to calculate the *Sharpe Ratio* for each pharmaceutical stock using yearly returns and yearly volatility. To simplify your calculations, assume a risk-free rate of $0\%$ per year (*i.e*, no risk-free premium). Compare the Sharpe ratios across companies. Do the highest-return stocks also have the best risk-adjusted performance? Are there any stocks that stand out as particularly efficient in generating returns relative to their risk? Are there companies that deliver strong returns but with disproportionately high volatility?

::: callout-tip
### Hint

There are two ways you can use to create the *Sharpe Ratio*:

1.  Using the previously created `yearly_returns` and `yearly_volatility` objects, use the `left_join()` function to merge them based on a common set of identifiers (in this case, `date` and `symbol`). After that, manipulate the resulting `data.frame` with `mutate` to generate the *Sharpe Ratio*.

2.  Using `tq_transmute` in a very similar fashion to what you have done to calculate the yearly volatility, but now passing the the `SharpeRatio.annualized` function with arguments `Rf=0` and `scale=252`.

Although both approaches should yield similar results, potential differences might stem from rounding.
:::

```{r}
#| warning: false
#| message: false

#Option 1
yearly_sharpe_1=financial_data%>%
  group_by(symbol)%>%
  tq_transmute(select = adjusted,
               mutate_fun = dailyReturn,
               col_rename = 'daily_return')%>%
  tq_transmute(select = daily_return,
               mutate_fun = apply.yearly,
               FUN=SharpeRatio.annualized,
               Rf=0,
               scale=252,
               col_rename = 'yearly_sharpe')

#Option 2
yearly_sharpe_2=yearly_returns%>%
  left_join(yearly_volatility)%>%
  group_by(symbol)%>%
  mutate(yearly_sharpe=yearly_return/yearly_volatility)

yearly_sharpe_1
yearly_sharpe_2

```

## Exercise 6

Way to go! As you delve deeper into your investment analysis, your fund manager emphasizes the importance of understanding how different pharmaceutical stocks interact with one another over time. To gain insights into the relationships between these companies, your next task is to calculate the correlation of daily stock returns for the selected pharmaceutical companies for the analysis period.

::: callout-tip
### Hint

1.  First, start by calculating the daily returns for each stock. You can use the `tq_transmute` function into your dataset and apply the `dailyReturn` function.
2.  After that, you need to pivot your data in such a way that each column is a specific ticker with information on daily returns. You can do that by calling `pivot_wider(names_from='symbol',values_from='daily_return')`, assuming that your daily return variable is called `daily_return`.
3.  With that, you'll achieve a data frame that now has $11$ columns, namely, the `date` and the $10$ individual ticker columns with daily return information.
4.  To make sure that you are calculating the correlation using a $10\times10$ matrix, use `select(-date)` to get rid of the date column and pipe that into `cor()`, which calculates the correlation across all pairs of variables within a `data.frame`, and outputs a correlation matrix.

If you want, you can pipe the result into `ggcorplot()`, a function from the `ggcorplot` package that provides meaningful visualizations of correlation matrices.
:::

```{r}
#| warning: false
#| message: false

corr_returns=financial_data%>%
  group_by(symbol)%>%
  tq_transmute(select = adjusted,
               mutate_fun = dailyReturn,
               col_rename = 'daily_return')%>%
  pivot_wider(names_from='symbol',values_from = 'daily_return')%>%
  select(-date)%>%
  cor()

corr_returns%>%ggcorrplot(hc.order = TRUE, type = "lower",lab = TRUE)


```

## Exercise 7

Based on your analysis of the correlation between each stock, it seems that these pharmaceutical firms are relatively trending together. Notwithstanding, there might be gains from diversification if instead of choosing a specific firm, we decide to hold a portfolio of pharmaceutical stocks.

Investing in a single stock exposes an investor to company-specific (idiosyncratic) risk, such as lawsuits, failed drug trials, or regulatory changes. However, constructing a diversified portfolio of multiple stocks within the same industry can help smooth out these risks while still capturing the overall sector trends. For instance, while one pharmaceutical company may experience a stock price drop due to a failed drug trial, another might gain due to a successful FDA approval. By equally weighting multiple stocks, investors can reduce the impact of any single companyâ€™s negative performance while still benefiting from the broader industry's growth.

Your manager liked your idea and wanted to test it out by creating an *equally-weighted* portfolio of all pharmaceutical companies over time. Using the `tq_transmute()` function, create an object, `portfolio_returns`, that contains the yearly returns of a portfolio that assigns equal weights - in this case, 10% - on each stock, and compare that to the yearly returns of the *S&P 500* Index. Would the fund manager be better-off by investing in the portfolio relative to the *S&P500*?

::: callout-tip
### Hint

1.  First, start by calculating the yearly returns for each stock using the `tq_transmute()` function as before, grouping the data by `symbol` and creating a new variable, `yearly_return`.
2.  Knowing that you have an equally-weighted portfolio, group your data my `date` and pipe the result into a `summarize()` function to create a new variable, `portfolio_return` as the average across all stocks. Assign this result to an object called `portfolio_returns`
3.  Fetch *S&P 500* data using a similar call to `tq_get()` like you did in the beginning of the exercise, but now collecting data for `^GSPC`. Calculate the yearly returns and assign to a new variable, `index_return`. Store the result in another `data.frame`, `index_returns`.
4.  Merge both datasets using `left_join()`.
:::

```{r}

portfolio_returns=financial_data%>%
  group_by(symbol)%>%
  tq_transmute(select = adjusted,
               mutate_fun = yearlyReturn,
               col_rename = 'yearly_return')%>%
  group_by(date)%>%
  summarize(portfolio_return=mean(yearly_return,na.rm=TRUE))

index_returns=tq_get('^GSPC',from=start_date,to=end_date)%>%
  tq_transmute(select = adjusted,
               mutate_fun = yearlyReturn,
               col_rename = 'index_return')

left_join(portfolio_returns,index_returns)

```

## Exercise 8

After analyzing the equally weighted pharmaceutical portfolio, the fund manager was impressed with the performance results. However, they remain skeptical about whether the portfolio truly provides better risk-adjusted returns compared to simply picking one of the best-performing stocks in the industry.

As final step, your job is to prove whether the portfolio offers superior risk-adjusted returns by computing the *Sharpe Ratio* for both the portfolio and its individual stocks in 2024. If the portfolio has a higher Sharpe ratio, it means that diversification helps maximize returns while controlling for risk â€” an essential argument when managing institutional funds.

In order to do that, your task is to provide a visualization of the *Sharpe Ratio* of the equally-weighted portfolio you've just created and compare that to those of the individual stocks. I have already created the portfolio results for you, so you can copy-paste that to your session:

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false

portfolio_sharpe=data.frame(symbol='Portfolio',
                            yearly_return=0.03705213,
                            yearly_volatility=0.1223983)

```

::: callout-tip
### Hint

1.  Create the `portfolio_sharpe` in your session using the code chunk above.
2.  Using the `yearly_returns` object you've created in Exercise 2, filter by `year(date)==2024` and `left_join()` with the `yearly_volatility` object you have created in Exercise 3, assigning the result to a new object
3.  Finally, bind `portfolio_sharpe` to the resulting `data.frame` in a rowwise manner using `rbind(dataframe1,dataframe2)`
4.  Finally, call `ggplot()` and adjust the aesthetics to show the relationship between risk (x-axis) and return (y-axis) for all individual stocks and the portfolio.
:::

```{r}
#| warning: false
#| message: false

#Individual Stocks
individual_sharpe_2024=yearly_returns%>%
  filter(year(date)==2024)%>%
  left_join(yearly_volatility)

#Portfolio 
portfolio_returns_2024=financial_data%>%
  filter(year(date)==2024)%>%
  group_by(symbol)%>%
  tq_transmute(select = adjusted,
               mutate_fun = dailyReturn,
               col_rename = 'daily_return')%>%
  group_by(date)%>%
  summarize(daily_return=mean(daily_return,na.rm=TRUE))%>%as.xts()

portfolio_sharpe_2024=data.frame(symbol='Portfolio',
                                 yearly_return=as.numeric(Return.annualized(portfolio_returns_2024)),
                                 yearly_volatility=as.numeric(StdDev.annualized(portfolio_returns_2024)))


library(ggrepel)

individual_sharpe_2024%>%
  rbind(portfolio_sharpe_2024)%>%
  mutate(sharpe_ratio=yearly_return/yearly_volatility,
         color=ifelse(symbol=='Portfolio','Portfolio','Individual Stocks'))%>%
  ggplot(aes(y=yearly_return,x=yearly_volatility))+
  geom_abline(slope = 0,intercept = 0,linetype='dashed')+
  geom_point(aes(size=sharpe_ratio,color=color))+
  geom_text_repel(aes(label=glue('{symbol}: {round(sharpe_ratio,2)}'),vjust=3),size=3)+
  theme_minimal()+
  labs(x='Yearly Volatility',
       y='Yearly Return',
       title='A comparison of individual returns and volatilities vis-a-vis portfolio results',
       subtitle = 'Source: Yahoo! Finance')+
  scale_y_continuous(labels=percent,limits = c(-0.5,0.5))+
  scale_x_continuous(labels=percent)+
  theme(legend.position = 'none')
      
```

## Wrapping-up your analysis

Now that you have analyzed the Sharpe ratios of both individual pharmaceutical stocks and the equally weighted portfolio, take a step back and summarize your insights. Did the portfolio offer a better risk-adjusted return compared to individual stocks? If so, why? If not, what might explain the results?

Based on your findings, what would you recommend to the fund manager? Would you suggest investing in the diversified portfolio, or do certain individual stocks offer superior risk-adjusted returns? Would you propose an alternative weighting scheme, such as a market cap-weighted portfolio, to further improve performance?

Write a short conclusion summarizing your key takeaways and justify your investment recommendation using data-driven insights.
