{
  "hash": "fc2b96cbc43d95bb2498d49f0f45a484",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Case Prep\"\nauthor: \"Lucas S. Macoris (FGV-EAESP)\"\nformat:\n  html:\n    page-layout: full\neditor: visual\n---\n\n\n\n# About\n\nThis exercise list is a preparation for students of the *Practical Applications in Quantitative Finance* course held at FGV-EAESP. This document serves as a refresher on key R programming concepts covered in previous lectures, reinforcing the essential skills needed for quantitative finance applications. By revisiting these foundations, you’ll ensure a solid grasp of the tools and techniques required to analyze financial data effectively. As we progress, you’ll apply these concepts to real-world finance examples, including portfolio analysis, risk assessment, and asset pricing models. Mastering these skills now will prepare you to fully engage with the practical applications we’ll explore throughout the course.\n\nTo help you structure your submission, I have provided a Quarto mock template, which is already available for you to use. This template is designed to help you seamlessly integrate your code and analysis, ensuring a clear and organized presentation of your work. Feel free to use it as a starting point to format your responses effectively. The mock template can be found in the *Data Cases* folder on *eClass®*.\n\n::: callout-important\n### Deliverable\n\nEach student is expected to deliver his/her assignment individually, although you can freely work in groups for solving the questions. A submission must be either an `.R` script or a `.qmd` (Quarto) file, ensuring that both your code and interpretations of the results are clearly presented. Whenever applicable, include concise explanations alongside your code to demonstrate your understanding of the analysis. The due date for this submission is specified on *eClass®*, so please check the platform for details.\n:::\n\n## Tech-setup\n\nBefore you start, make sure that you have your `R` session correctly configured with all the following packages by running the code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Package names\npackages <- c(\"tidyverse\",\"tidyquant\",\"tidymodels\",\"xts\", \"glue\",\"scales\", \"ggthemes\")\n\n# Install packages not yet installed\ninstalled_packages <- packages %in% rownames(installed.packages())\n\nif (any(installed_packages == FALSE)) {\n  install.packages(packages[!installed_packages])\n}\n\n# Load all packages\ninvisible(lapply(packages, library, character.only = TRUE))\n```\n:::\n\n\n\nAlternatively, you can simply call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Install if not already available\n  install.packages('tidyverse')\n  install.packages('tidyquant')\n  install.packages('glue')\n  install.packages('scales')\n  install.packages('ggthemes')\n\n#Load\n  library(tidyverse)\n  library(tidyquant)\n  library(tidymodels)\n  library(glue)\n  library(scales)\n  library(ggthemes)\n```\n:::\n\n\n\n::: callout-note\nFor the remainder of the sessions, you will use financial data from multiple sources, either that being from a local file or a pull from *Yahoo! Finance*. Whenever you are working with local files, it is always important to make sure that your R is able to locate it. To check the working directory of your session, simply type `getwd()`, and it will prompt your current directory. If you want to change your directory, simply type `setwd('C:/path/to/your/folder')` with the specific path to your desired folder. To make sure that you switched directories, you can type `getwd()` to confirm the new directory.\n\nMost of the issues regarding not being able to load a specific file, like `.csv` and `.xlsx` spreadsheets can be easily solved by placing your R file (either a plain script, like `myscript.R`, or a quarto document, `myquartodoc.qmd`) in the **same** folder as of your data. When you open your R script or Quarto document, it will automatically set that folder (which coincides with the data folder) as the working directory. To confirm which files are available to you, you can simply type `list.files()` to get the list of all files that R can find in the working directory.\n\nIf you prefer, whenever you are calling a function that requires a path to your computer, you can always provide the full path of the file: for example, using `\"C:/Users/Lucas/Documents/GitHub/Folder/test.csv'` would find the `test.csv` even if `Folder` is not your working directory.\n\nWhenever you are unsure about how a specific function works, type the function in an R script and you will notice that RStudio will auto complete the function name for you. To get more information on a given function's arguments, hit `F1` to see a description at the bottom-right of your session.\n:::\n\n## Exercise 1\n\n**This exercise aims to gauge your skill in fetching data in `R` through different sources. You are asked to work on the following questions:**\n\n1.  Go to our *eClass®* and download the *Ibovespa_Sample.txt* file inside the *Data Cases* folder. This file contains stock price information regarding 6 publicly traded companies that are part of the Brazilian market index, *Ibovespa*.\n\n2.  Read the file into your session using the `read_delim()` function, and assign to an object called `FILE_SAMPLE`. Make sure you have the `tidyverse` package loaded. Depending on how your computer reads delimited data, you may need to set the argument `sep` to `sep=';'` or `sep=' '`.\n\n3.  Inspect the first 10 lines of the object you have just created using the `head()` function, setting `n=10` as an argument.\n\n4.  How many rows and columns does your object have? You can use the function `dim(yourdata)` to find the exact dimensions.\n\n5.  Alternatively, fetch the exact same stock level information directly from *Yahoo! Finance* using the `tq_get()` function. Collect the data beginning in 2020 (January $1^{st}$ until the end of 2024 (December $31^{st}$) using the `from` and `to` arguments of the `tq_get()` function. Make sure you have the `tidyquant` package loaded. Assign this data to a new object in your `R` session called `YAHOO_SAMPLE`.\n\n::: callout-tip\n### Hint\n\nRemember that the syntax for using `tq_get()` to collect stock prices is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_stocks <- tq_get(c(\"stock1\", \"stock2\"),\n                      from = \"YYYY-MM-DD\",\n                      to   = \"YYYY-MM-DD\")\n```\n:::\n\n\n\nFurthermore, you can use the `unique(FILE_SAMPLE$symbol)` to find the exact tickers contained in the file, and assign it to a new object, `assets`, which will then be piped onto a call to `tq_get()`.\n:::\n\n6.  How many rows and columns does this new object have?\n\n## Exercise 2\n\n**This exercise aims to gauge your skill on manipulating data using the `tidyverse` and the `tidyquant`. After loading these packages, provide your answers to the following questions:**\n\n1.  Using the `YAHOO_SAMPLE` you created before, create a new column, `Year`, that is defined as the year of a given timestamp found in the `date` column. You can use `year(date)` along with a `mutate` function to create this new variable. Update your `YAHOO_SAMPLE` object to make sure you have saved this variable.\n\n::: callout-tip\n### Hint\n\nRecall that the syntax for using the `mutate` function is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(.data, #The object you are performing the calculations \n       new_variable_1 = var1 * 2, #Can use basic operations...\n       new_variable_2 = median(var2), #Or predefined functions)\n       variable_3 = as.character(var3) #And can be used to modify existing variables)\n       ) \n```\n:::\n\n\n\nFurthermore, recall that you can always use the pipe operator (`%>%`) to chain operations along the way whenever you are using the `tidyverse`.\n:::\n\n2.  Using the updated `YAHOO_SAMPLE` object, use the `filter` function to filter for observations that occur in $2024$, use `group_by()` to group the data by `symbol`, and use the `summarize` the function to create a new variable, `avg_price`, defined as the average `adjusted` prices for each year-symbol combination. Sort your dataset by `avg_price` (highest-to-lowest), storing this result in an object called `2023_2024_Summary` and call it in your terminal. Which company had the highest price levels, and which one had the lowest?\n\n::: callout-tip\n### Hint\n\nRecall that the syntax for using the `filter` function is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(.data, #The object which you are performing the operations\n       variable_1 >10, #Simple arithmetic operators\n       variable_2 %in% c('AAPL','MSFT','FORD'), #Pattern search\n       !(variable_3 %in% c('Boston','Mass','Silicon Valley')), #Negate pattern search\n       variable_4 >=10 & variable_3<= 4 | is.na(variable_4) #IF and OR conditions\n       ) \n```\n:::\n\n\n:::\n\n3.  Using the `YAHOO_SAMPLE` dataset, group your data by `symbol` and create a summary of yearly returns. To do that, first pipe the grouped data into into the `tq_transmute` function applying the `yearlyReturn`, assigning it to a new variable,`yearly_return`. Arrange your result by `date` and `yearly_return` (highest-to-lowest). Which stock had the best performance in 2020, and which stock had the worst?\n\n::: callout-tip\n### Hint\n\nRecall that the syntax for using the `tq_transmute` function is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntq_transmute(.data, #The object you are performing the calculations \n       selected_variables, #The columns to send to the mutation function\n       mutate_fun, #The mutation function from either the xts, quantmod, or TTR package.\n       col_rename #A string or character vector containing names that can be used to quickly rename columns\n       )\n```\n:::\n\n\n:::\n\n## Exercise 3\n\n**This exercise aims to gauge your skill on data visualization using the `ggplot2` package. After loading this package, provide your answers to the following questions:**\n\n1.  Using the `YAHOO_SAMPLE` object, create a `ggplot` object with the follow `aes`: the `x` component should refer to the `date` column, the `y` axis should refer to the `adjusted` column, and the `group` argument should refer to the `symbol` column.\n\n::: callout-tip\n### Hint\n\nRecall that the syntax for mapping your data to `ggplot` and adding further layers for adjusting aesthetics is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=your_data, aes(x= variable_1, y=variable_2, group=your_group,...))+\ngeom_{yourgeom} +\nadditional_layer_1()+\nadditional_layer_2()+\nany_additional_layer_commands()\n```\n:::\n\n\n:::\n\n2.  Add a geometry layer to your chart using the `geom_line()` function and call it in your terminal.\n\n3.  Change the titles of your x and y axis, as well as chart title and subtitle using the `labs()` function.\n\n4.  Facet your data by each symbol using the `facet_wrap(symbol~.)` function. Set the arguments of this function in such a way that you have a 2x3 orientation (*i.e*, `nrow=2` and `ncol=3`).\n\n5.  Apply a predefined theme using the `theme_minimal()` function.\n\n6.  Save your plot using the `ggsave()` function. To use it, call `ggsave('myplot.jpg',width=10,height = 6)` to save the last plot that has been prompted to your terminal using a 10x6 resolution (in units).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}