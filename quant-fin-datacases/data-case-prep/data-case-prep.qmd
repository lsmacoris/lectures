---
title: "Data Case Prep"
author: "Lucas S. Macoris (FGV-EAESP)"
format:
  html:
    page-layout: full
editor: visual
---

# About

This exercise list is a preparation for students of the *Practical Applications in Quantitative Finance* course held at FGV-EAESP. This document serves as a refresher on key R programming concepts covered in previous lectures, reinforcing the essential skills needed for quantitative finance applications. By revisiting these foundations, you’ll ensure a solid grasp of the tools and techniques required to analyze financial data effectively. As we progress, you’ll apply these concepts to real-world finance examples, including portfolio analysis, risk assessment, and asset pricing models. Mastering these skills now will prepare you to fully engage with the practical applications we’ll explore throughout the course.

To help you structure your submission, I have provided a Quarto mock template, which is already available for you to use. This template is designed to help you seamlessly integrate your code and analysis, ensuring a clear and organized presentation of your work. Feel free to use it as a starting point to format your responses effectively. The mock template can be found in the *Data Cases* folder on *eClass®*.

::: callout-important
### Deliverable

Each student is expected to deliver his/her assignment individually, although you can freely work in groups for solving the questions. A submission must be either an `.R` script or a `.qmd` (Quarto) file, ensuring that both your code and interpretations of the results are clearly presented. Whenever applicable, include concise explanations alongside your code to demonstrate your understanding of the analysis. The due date for this submission is specified on *eClass®*, so please check the platform for details.
:::

## Tech-setup

Before you start, make sure that you have your `R` session correctly configured with all the following packages by running the code below:

```{r}
#| warning: false
#| message: false

# Package names
packages <- c("tidyverse","tidyquant","tidymodels","xts", "glue","scales", "ggthemes")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())

if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Load all packages
invisible(lapply(packages, library, character.only = TRUE))
```

Alternatively, you can simply call:

```{r}
#| eval: false #I don't want R to evaluate this code; it is just for presentation purposes
#| echo: true #I want this code chunk to display on the Quarto Document

#Install if not already available
  install.packages('tidyverse')
  install.packages('tidyquant')
  install.packages('glue')
  install.packages('scales')
  install.packages('ggthemes')

#Load
  library(tidyverse)
  library(tidyquant)
  library(tidymodels)
  library(glue)
  library(scales)
  library(ggthemes)
  
```

::: callout-note
For the remainder of the sessions, you will use financial data from multiple sources, either that being from a local file or a pull from *Yahoo! Finance*. Whenever you are working with local files, it is always important to make sure that your R is able to locate it. To check the working directory of your session, simply type `getwd()`, and it will prompt your current directory. If you want to change your directory, simply type `setwd('C:/path/to/your/folder')` with the specific path to your desired folder. To make sure that you switched directories, you can type `getwd()` to confirm the new directory.

Most of the issues regarding not being able to load a specific file, like `.csv` and `.xlsx` spreadsheets can be easily solved by placing your R file (either a plain script, like `myscript.R`, or a quarto document, `myquartodoc.qmd`) in the **same** folder as of your data. When you open your R script or Quarto document, it will automatically set that folder (which coincides with the data folder) as the working directory. To confirm which files are available to you, you can simply type `list.files()` to get the list of all files that R can find in the working directory.

If you prefer, whenever you are calling a function that requires a path to your computer, you can always provide the full path of the file: for example, using `"C:/Users/Lucas/Documents/GitHub/Folder/test.csv'` would find the `test.csv` even if `Folder` is not your working directory.

Whenever you are unsure about how a specific function works, type the function in an R script and you will notice that RStudio will auto complete the function name for you. To get more information on a given function's arguments, hit `F1` to see a description at the bottom-right of your session.
:::

## Exercise 1

**This exercise aims to gauge your skill in fetching data in `R` through different sources. You are asked to work on the following questions:**

1.  Go to our *eClass®* and download the *Ibovespa_Sample.txt* file inside the *Data Cases* folder. This file contains stock price information regarding 6 publicly traded companies that are part of the Brazilian market index, *Ibovespa*.

2.  Read the file into your session using the `read_delim()` function, and assign to an object called `FILE_SAMPLE`. Make sure you have the `tidyverse` package loaded. Depending on how your computer reads delimited data, you may need to set the argument `sep` to `sep=';'` or `sep=' '`.

3.  Inspect the first 10 lines of the object you have just created using the `head()` function, setting `n=10` as an argument.

4.  How many rows and columns does your object have? You can use the function `dim(yourdata)` to find the exact dimensions.

5.  Alternatively, fetch the exact same stock level information directly from *Yahoo! Finance* using the `tq_get()` function. Collect the data beginning in 2020 (January $1^{st}$ until the end of 2024 (December $31^{st}$) using the `from` and `to` arguments of the `tq_get()` function. Make sure you have the `tidyquant` package loaded. Assign this data to a new object in your `R` session called `YAHOO_SAMPLE`.

::: callout-tip
### Hint

Remember that the syntax for using `tq_get()` to collect stock prices is:

```{r}
#| eval: false
#| echo: true

my_stocks <- tq_get(c("stock1", "stock2"),
                      from = "YYYY-MM-DD",
                      to   = "YYYY-MM-DD")

```

Furthermore, you can use the `unique(FILE_SAMPLE$symbol)` to find the exact tickers contained in the file, and assign it to a new object, `assets`, which will then be piped onto a call to `tq_get()`.
:::

6.  How many rows and columns does this new object have?

## Exercise 2

**This exercise aims to gauge your skill on manipulating data using the `tidyverse` and the `tidyquant`. After loading these packages, provide your answers to the following questions:**

1.  Using the `YAHOO_SAMPLE` you created before, create a new column, `Year`, that is defined as the year of a given timestamp found in the `date` column. You can use `year(date)` along with a `mutate` function to create this new variable. Update your `YAHOO_SAMPLE` object to make sure you have saved this variable.

::: callout-tip
### Hint

Recall that the syntax for using the `mutate` function is:

```{r}
#| eval: false
#| echo: true

mutate(.data, #The object you are performing the calculations 
       new_variable_1 = var1 * 2, #Can use basic operations...
       new_variable_2 = median(var2), #Or predefined functions)
       variable_3 = as.character(var3) #And can be used to modify existing variables)
       ) 

```

Furthermore, recall that you can always use the pipe operator (`%>%`) to chain operations along the way whenever you are using the `tidyverse`.
:::

2.  Using the updated `YAHOO_SAMPLE` object, use the `filter` function to filter for observations that occur in $2024$, use `group_by()` to group the data by `symbol`, and use the `summarize` the function to create a new variable, `avg_price`, defined as the average `adjusted` prices for each year-symbol combination. Sort your dataset by `avg_price` (highest-to-lowest), storing this result in an object called `2023_2024_Summary` and call it in your terminal. Which company had the highest price levels, and which one had the lowest?

::: callout-tip
### Hint

Recall that the syntax for using the `filter` function is:

```{r}
#| eval: false
#| echo: true
filter(.data, #The object which you are performing the operations
       variable_1 >10, #Simple arithmetic operators
       variable_2 %in% c('AAPL','MSFT','FORD'), #Pattern search
       !(variable_3 %in% c('Boston','Mass','Silicon Valley')), #Negate pattern search
       variable_4 >=10 & variable_3<= 4 | is.na(variable_4) #IF and OR conditions
       ) 
```
:::

3.  Using the `YAHOO_SAMPLE` dataset, group your data by `symbol` and create a summary of yearly returns. To do that, first pipe the grouped data into into the `tq_transmute` function applying the `yearlyReturn`, assigning it to a new variable,`yearly_return`. Arrange your result by `date` and `yearly_return` (highest-to-lowest). Which stock had the best performance in 2020, and which stock had the worst?

::: callout-tip
### Hint

Recall that the syntax for using the `tq_transmute` function is:

```{r}
#| eval: false
#| echo: true

tq_transmute(.data, #The object you are performing the calculations 
       selected_variables, #The columns to send to the mutation function
       mutate_fun, #The mutation function from either the xts, quantmod, or TTR package.
       col_rename #A string or character vector containing names that can be used to quickly rename columns
       )

```
:::

## Exercise 3

**This exercise aims to gauge your skill on data visualization using the `ggplot2` package. After loading this package, provide your answers to the following questions:**

1.  Using the `YAHOO_SAMPLE` object, create a `ggplot` object with the follow `aes`: the `x` component should refer to the `date` column, the `y` axis should refer to the `adjusted` column, and the `group` argument should refer to the `symbol` column.

::: callout-tip
### Hint

Recall that the syntax for mapping your data to `ggplot` and adding further layers for adjusting aesthetics is:

```{r}
#| eval: false
#| echo: true
ggplot(data=your_data, aes(x= variable_1, y=variable_2, group=your_group,...))+
geom_{yourgeom} +
additional_layer_1()+
additional_layer_2()+
any_additional_layer_commands()
```
:::

2.  Add a geometry layer to your chart using the `geom_line()` function and call it in your terminal.

3.  Change the titles of your x and y axis, as well as chart title and subtitle using the `labs()` function.

4.  Facet your data by each symbol using the `facet_wrap(symbol~.)` function. Set the arguments of this function in such a way that you have a 2x3 orientation (*i.e*, `nrow=2` and `ncol=3`).

5.  Apply a predefined theme using the `theme_minimal()` function.

6.  Save your plot using the `ggsave()` function. To use it, call `ggsave('myplot.jpg',width=10,height = 6)` to save the last plot that has been prompted to your terminal using a 10x6 resolution (in units).
