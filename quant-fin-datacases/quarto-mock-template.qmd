---
title: "Data Case Prep - Exercises"
author: "Student XXXX"
format:
  html:
    page-layout: full
editor: visual
---

# About this template

To help you structure your submission, I have provided a Quarto mock template, which is already available for you to use. This template is designed to help you seamlessly integrate your code and analysis, ensuring a clear and organized presentation of your work. Feel free to use it as a starting point to format your responses effectively. You can include your code inside the `R` code chunks. To run a specific code chunk, select all lines that apply and hit `Ctrl+Enter` (alternatively, click on the *Run Current Chunk* button at the top-right corner of the code chunk. Alternatively, to render the Quarto altogether, ckick on the *Render* button (shortcut: `Ctrl+Shift+K`).

You can copy-paste the code chunk below each time you need to manipulate data. To provide your explanation and interpretation of the results for each question, you can write outside of the `R` coding chunk.


```{r}
#| echo: true
#| eval: true

### Enter your code here

```

Enter your analysis here.

## Tech-setup

Before you start, make sure that you have your `R` session correctly configured with all the following packages by running the code below:

```{r}
#| warning: false
#| message: false

# Package names
packages <- c("tidyverse","tidyquant","tidymodels","xts", "glue","scales", "ggthemes")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())

if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Load all packages
invisible(lapply(packages, library, character.only = TRUE))
```

Alternatively, you can simply call:

```{r}
#| eval: false #I don't want R to evaluate this code; it is just for presentation purposes
#| echo: true #I want this code chunk to display on the Quarto Document

#Install if not already available
  install.packages('tidyverse')
  install.packages('tidyquant')
  install.packages('glue')
  install.packages('scales')
  install.packages('ggthemes')

#Load
  library(tidyverse)
  library(tidyquant)
  library(tidymodels)
  library(glue)
  library(scales)
  library(ggthemes)
  
```

## Exercise 1

**This exercise aims to gauge your skill in fetching data in `R` through different sources. You are asked to work on the following questions:**

1.  Go to our *eClassÂ®* and download the *Ibovespa_Sample.txt* file inside the *Data Cases* folder. This file contains stock price information regarding 10 publicly traded companies that are part of the Brazilian market index, *Ibovespa*.

2.  Read the file into your session using the `read_delim()` function, using the argument `sep=';'`, and assign to an object called `FILE_SAMPLE`. Make sure you have the `tidyverse` package loaded.

3.  Inspect the first 10 lines of the object you have just created using the `head()` function, setting `n=10` as an argument.

4.  How many rows and columns does your object have?

5.  Alternatively, fetch the exact same stock level information directly from *Yahoo! Finance* using the `tq_get()` function. Collect the data beginning in 2020 (January $1^{st}$ until the end of 2024 (December $31^{st}$) using the `from` and `to` arguments of the `tq_get()` function. Make sure you have the `tidyquant` package loaded. Assign this data to a new object in your `R` session called `YAHOO_SAMPLE`.

6.  How many rows and columns does this new object have?

## Exercise 2

**This exercise aims to gauge your skill on manipulating data using the `tidyverse` and the `tidyquant`. After loading these packages, provide your answers to the following questions:**

1.  Using the `YAHOO_SAMPLE` you created before, create a new column, `Year`, that is defined as the year of a given timestamp found in the `date` column. You can use `year(date)` along with a `mutate` function to create this new variable. Update your `YAHOO_SAMPLE` object to make sure you have saved this variable.

2.  Using the updated `YAHOO_SAMPLE` object, use the `filter` function to filter for observations that occur between $2023$ and $2024$, use `group_by()` to group the data by `symbol` and `Year`, and use the `summarize` the function to create a new variable, `avg_price`, defined as the average `adjusted` prices for each year-symbol combination. Sort your dataset by `year` and `avg_price` (highest-to-lowest), storing this result in an object called `2023_2024_Summary` and call it in your terminal. Which company had the highest price levels, and which one had the lowest?

3.  Using the `YAHOO_SAMPLE` dataset, group your data by `symbol` and create a summary of returns up-to-date. To do that, first pipe the grouped data into the `tq_mutate` function to create a new variable, `daily_return`, using the `dailyReturn` function. After that, pipe the result into the `tq_transmute` function applying the `Return.cumulative` to the `daily_return` column, assigning it to a new variable `cum_return`. Arrange your result by `Year` and `cum_return`. Which stock had the best performance, and which stock had the worst?

## Exercise 3

**This exercise aims to gauge your skill on data visualization using the `ggplot2` package. After loading this package, provide your answers to the following questions:**

1.  Using the `YAHOO_SAMPLE` object, create a `ggplot` object with the follow `aes`: the `x` component should refer to the `date` column, the `y` axis should refer to the `adjusted` column, and the `group` argument should refer to the `symbol` column.

2.  Add a geometry layer to your chart using the `geom_line()` function and call it in your terminal.

3.  Change the titles of your x and y axis, as well as chart title and subtitle using the `labs()` function.

4.  Facet your data by each symbol using the `facet_wrap(symbol~.)` function. Set the arguments of this function in such a way that you have a 2x3 orientation (*i.e*, `n_row=3` and `n_col=2`).
