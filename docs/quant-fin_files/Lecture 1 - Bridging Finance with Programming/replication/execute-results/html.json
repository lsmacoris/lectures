{
  "hash": "9fa06451b038a73192694902d3615d0f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bridging Data with Programming - Replication\"\nauthor: \"Lucas S. Macoris\"\nformat:\n  html:\n    page-layout: full\neditor: visual\n---\n\n\n\n## About this Document\n\nThis file replicates the codes that have been discussed in the live-session lectures of the Practical Applications in Quantitative Finance course. To ensure you can run the codes without issues, please install and load all required packages beforehand. It is always a good practice to replicate this Quarto document and experiment by making edits to the parameters. At the end of this report, you will find a suggestion on how to tweak this report — try doing some changes on your own!\n\n::: callout-important\n### Attention\n\nThis is our first lecture, and I do not expect you to fully understand the underlying code. The goal is to showcase the most important R packages, how they work, and how you can make sure to have them available in our session. As we progress through the lectures, we will have a deep-dive on some of the most important aspects of these packages, and you will have some hands-on exercises to practice your coding skills.\n:::\n\n## 1. Introduction to `install.packages()` and `library()` in R\n\nWhen you're starting with R, you’ll frequently need to install and load packages to access additional functions beyond the base R functionalities. Two essential functions for this are:\n\n1.  `install.packages()` – Downloads and installs a package from *CRAN* (*Comprehensive R Archive Network*).\n2.  `library()` – Loads an installed package so that you can use its functions\n\nFor installing new packages, the syntax is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"package_name\")\n```\n:::\n\n\n\nNote that:\n\n1.  You only need to install a package once (unless you update or reinstall R).\n2.  Packages are stored in a library (a folder on your computer).\n3.  If a package is not available, check your internet connection or make sure CRAN is accessible.\n\nOnce a package is installed, you need to load it every time you start a new R session. The function `library()` makes the functions from the referred package available for use. For example, after installing `ggplot2` using `install.packages(\"ggplot2\")`, load it by calling:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\nIf you forget to load a package and try to use its functions, R will throw an error:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nError in ggplot(): could not find function \"ggplot\"\n```\n:::\n\n\n\nIn this course, we will be mostly using a handful of packages for data collection, data wrangling, and visualization. Namely, we will be mostly working with the following packages:\n\n1.  `tidyverse`: for data manipulation and visualization, including packages such as `dplyr`,`gpplot2`, and `tidyr`\n2.  `tidyquant`: for retrieving and working with financial data series\n3.  `tidymodels`: a set of routines for running statistical models\n4.  `glue`: a simple and efficient way to interpolate strings\n5.  `scales`: provides functions that are particularly useful for visualization, helping scaling axes, formatting labels, and applying transformations like logarithms or percentages.\n6.  `ggthemes`: a set of powerful themes for data visualization\n\nFor installing these packages, you could simply call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Install if not already available\n  install.packages('tidyverse')\n  install.packages('tidyquant')\n  install.packages('glue')\n  install.packages('scales')\n  install.packages('ggthemes')\n\n#Load\n  library(tidyverse)\n  library(tidyquant)\n  library(tidymodels)\n  library(glue)\n  library(scales)\n  library(ggthemes)\n```\n:::\n\n\n\nAlternatively, the code below searches for a given set of packages in our computer, installing only the packages that are not found. After installing all missing packages (if any) it loads all packages together:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Package names\npackages <- c(\"tidyverse\",\"tidyquant\",\"tidymodels\", \"glue\",\"scales\")\n\n# Install packages not yet installed\ninstalled_packages <- packages %in% rownames(installed.packages())\n\nif (any(installed_packages == FALSE)) {\n  install.packages(packages[!installed_packages])\n}\n\n# Load all packages\ninvisible(lapply(packages, library, character.only = TRUE))\n```\n:::\n\n\n\nMake sure to install all packages and load them, either by calling `library()` individually, or running the aforementioned code.\n\n::: callout-note\nFor the remainder of the sessions, you will use financial data from multiple sources, either that being from a local `.csv` file or a pull from *Yahoo! Finance*. Whenever you are working with local files, it is always important to make sure that your R is able to locate it. To check the working directory of your session, simply type `getwd()`, and it will prompt your current directory. If you want to change your directory, simply type `setwd('C:/path/to/your/folder')` with the specific path to your desired folder. To make sure that you switched directories, you can type `getwd()` to confirm the new directory.\n\nMost of the issues regarding not being able to load a specific file, like `.csv` and `.xlsx` spreadsheets can be easily solved by placing your R file (either a plain script, like `myscript.R`, or a quarto document, `myquartodoc.qmd`) in the **same** folder as of your data. When you open your R script or Quarto document, it will automatically set that folder (which coincides with the data folder) as the working directory. To confirm which files are available to you, you can simply type `list.files()` to get the list of all files that R can find in the working directory.\n\nIf you prefer, whenever you are calling a function that requires a path to your computer, you can always provide the full path of the file: for example, using `\"C:/Users/Lucas/Documents/GitHub/Folder/test.csv'` would find the `test.csv` even if `Folder` is not your working directory.\n:::\n\n## 2. Using `dplyr`, the data manipulation package in the `tidyverse`\n\nThe `dplyr` package is one of the core packages in the `tidyverse` and is designed for efficient and readable data manipulation. It provides a set of functions (also called \"verbs\") that make working with data frames (or tibbles) intuitive and expressive. Key Features:\n\n1.  Filter rows: `filter()`\n2.  Select columns: `select()`\n3.  Mutate (create new columns): `mutate()`\n4.  Summarize data: `summarize()`\n5.  Group operations: `group_by()`\n6.  Join tables: `left_join()`, `right_join()`, `inner_join()`, `full_join()`\n\nFor this section, you will be using a `.csv` file that contains *Nvidia (ticker: NVDA)* prices collected directly from *Yahoo! Finance*. You can download the data using directly on *eClass®* and place it in the same folder of your R/Quarto report. In my case, I have created a folder, called `Assets`, inside my working directory.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv('Assets/NVDA.csv')%>%\n  select(Timestamp,Adjusted)%>%\n  mutate(Date=as.Date(Timestamp),\n         Year=year(Date))%>%\n  filter(Year!='2025')%>%\n  arrange(Date)%>%\n  mutate(Return = Adjusted/lag(Adjusted,1)-1)%>%\n  group_by(Year)%>%\n  summarize(\n    `Average Daily Return` = percent(mean(Return,na.rm=TRUE),accuracy = 0.01),\n    `Annualized Return`= percent(prod(1+Return,na.rm=TRUE)-1,accuracy = 0.01))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 3\n    Year `Average Daily Return` `Annualized Return`\n   <dbl> <chr>                  <chr>              \n 1  2007 0.18%                  41.44%             \n 2  2008 -0.42%                 -76.28%            \n 3  2009 0.40%                  131.47%            \n 4  2010 -0.04%                 -17.56%            \n 5  2011 0.02%                  -10.00%            \n 6  2012 -0.03%                 -10.97%            \n 7  2013 0.12%                  33.52%             \n 8  2014 0.11%                  27.40%             \n 9  2015 0.23%                  67.12%             \n10  2016 0.51%                  226.96%            \n11  2017 0.27%                  81.99%             \n12  2018 -0.10%                 -30.82%            \n13  2019 0.26%                  76.94%             \n14  2020 0.38%                  122.30%            \n15  2021 0.36%                  125.48%            \n16  2022 -0.20%                 -50.26%            \n17  2023 0.53%                  239.02%            \n18  2024 0.45%                  171.25%            \n```\n\n\n:::\n:::\n\n\n\nLet's break this code down. First, the function `read.csv()` reads an NVDA.csv file inside the `Assets` subfolder. This function returns a `data.frame` object that is an input to the rest of the code. All other functions are from `dplyr`, and are intended to facilitate data wrangling. We'll cover all these functions in our upcoming lecture.\n\n## 3. Using `ggplot2` for data visualization\n\nThe `ggplot2` package is the most powerful and widely used data visualization package in R. It is part of the `tidyverse` and follows the [Grammar of Graphics](https://www.amazon.com.br/Grammar-Graphics-Leland-Wilkinson/dp/0387245448), a systematic approach to creating complex graphics by layering components.\n\nUnlike base R plotting functions, like `plot()`, `ggplot2` provides:\n\n1.  Highly customizable plots. Its modular approach makes it easy to modify and extend plots.\n2.  Elegant default themes. Default themes are aesthetically pleasing and can be customized.\n3.  Layered structure for complex graphics. Users can combine multiple layers, change colors, themes, scales, and annotations effortlessly.\n4.  Seamless integration with the tidyverse. It integrates seamlessly with `dplyr`, `tidyr` and `tidyquant`, allowing smooth data manipulation and visualization.\n\nThe code below shows how you can use `ggplot2` to load a file. It reads a `.csv` file containing *Nvidia* stock prices, processes the data, and visualizes the stock price trends for 2023 and 2024 using `ggplot2`. Note that **I have not** called `library(tidyverse)` again since my session already had it loaded for the previous code chunks!\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread.csv('Assets/NVDA.csv')%>%\n  select(Timestamp,Adjusted)%>%\n  mutate(Date=as.Date(Timestamp))%>%\n  arrange(Date)%>%\n  filter(year(Date) %in% c(2023,2024))%>%\n  ggplot(aes(x=Date,y=Adjusted))+\n  geom_line()+\n  theme_light()+\n  labs(title = 'Nvidia stock prices between 2023 and 2024',\n       subtitle = 'Source: Yahoo! Finance',\n       x='',\n       y='Adjusted Close (in $)')+\n  scale_y_continuous(labels = dollar)\n```\n\n::: {.cell-output-display}\n![](replication_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n## 4. Using `tidyr` to reshape and simplify data\n\nThe `tidyr` package in R is designed for data cleaning and reshaping, making datasets \"tidy\" for easier analysis. It provides functions to pivot, separate, unite, and fill missing data efficiently. For this section, you will be using a `.csv` file that contains information from multiple tickers collected directly (`Multiple_Assets.csv`). You can download the data using directly on *eClass®* and place it in the same folder of your R/Quarto report. In my case, I have created a folder, called `Assets`, inside my working directory.\n\nOpening this file promptly shows that the `.csv` file is in a very messy format, with different columns that refer to the same variable, like closing prices. Using `tidyr` facilitates the transitions towards a tidy format that will be key for data manipulation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv('Assets/Multiple_Assets.csv')%>%\n  pivot_longer(cols=matches('Open|High|Low|Close|Volume|Adjusted'),\n               names_to = c('Asset','Metric'),\n               names_sep = '\\\\.',\n               values_to = 'Value')%>%\n  mutate(Date=as.Date(Timestamp),\n         Year=year(Date))%>%\n  group_by(Asset,Metric,Year)%>%\n  summarize(Value=mean(Value,na.rm=TRUE))%>%\n  pivot_wider(names_from = c('Metric'),values_from = 'Value')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 57 × 8\n# Groups:   Asset [3]\n   Asset  Year Adjusted Close  High   Low  Open      Volume\n   <chr> <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>       <dbl>\n 1 AAPL   2007     3.86  4.58  4.65  4.51  4.59  984047751.\n 2 AAPL   2008     4.27  5.07  5.18  4.96  5.08 1130360498.\n 3 AAPL   2009     4.42  5.24  5.30  5.18  5.24  568467011.\n 4 AAPL   2010     7.82  9.28  9.37  9.17  9.28  599305267.\n 5 AAPL   2011    11.0  13.0  13.1  12.9  13.0   492298967.\n 6 AAPL   2012    17.4  20.6  20.8  20.4  20.6   527856818.\n 7 AAPL   2013    14.5  16.9  17.1  16.7  16.9   406434800 \n 8 AAPL   2014    20.4  23.1  23.3  22.9  23.1   252610922.\n 9 AAPL   2015    26.9  30.0  30.3  29.7  30.0   207397617.\n10 AAPL   2016    24.0  26.2  26.4  25.9  26.1   153690124.\n# ℹ 47 more rows\n```\n\n\n:::\n:::\n\n\n\n## 5. Collecting and exporting data\n\nEverybody who has experience working with data is also familiar with storing and reading data in formats like `.csv`, `.xls`, `.xlsx` or other delimited value storage. However, if your goal is to replicate a common task at a predefined time interval, like charting weekly stock prices for a selected bundle of stocks every end-of-week, it might be overwhelming to manually perform these tasks every week. Our slides covered a handful of data sources that are widely used among finance practictioners, such as stock-level data, macroeconomic data, among others.\n\nWhen it comes to stock-level data, the `tidyquant` is a powerful package in R that simplifies financial data retrieval and analysis. One of its key features is the ability to fetch stock market data from *Yahoo! Finance* using the `tq_get()` function.\n\nTo get historical stock prices from *Yahoo! Finance*, use the `tq_get()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch historical stock prices for FANG (Facebook, Amazon, Netflix, Google) stocks\nFANG_data <- tq_get(c(\"META\",\"AMZN\",\"NFLX\",\"GOOG\"), from = \"2020-01-01\", to = \"2024-01-01\")\n```\n:::\n\n\n\n## 6. Using `write.csv()` to export a file\n\nThe `write.csv()` function in R allows users to export data frames to `.csv` (Comma-Separated Values) files. These files are commonly used for storing tabular data and can be opened in Excel, Google Sheets, or other data analysis tools. It works by defining the following arguments:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(x,file)\n```\n:::\n\n\n\n1.  `x`: The data frame to export.\n2.  `file`: The file path where the CSV will be saved\n\nIt is now easy to use `tq_get()` in conjunction with `write.csv()` to retrieve data from *Yahoo! Finance* and export it to a `.csv` file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(FANG_data,'FANG_prices.csv')\n```\n:::\n\n\n\nThe code above assumes that you have created the `FANG_data` object in your R session.\n\n## Try doing some edits on your own!\n\nThe code below downloads data for all stocks contained in the `assets` vector using the `tq_get()` function and the arguments `from` and `to`, and exports a `.csv` file with your newly retrieved data. Try changing this code to download data for a list of stocks of your choice and a specific timeframe. Make sure to write the date ranges in `YYYY-MM-DD` format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Define the list of assets\nassets = c('MMM','GOOGL','NFLX','WEGE3.SA')\n\n#Define the time ranges\nstart=\"2020-01-01\"\nend=Sys.Date() #Today\n\n# Fetch historical stock prices for selected assets\nfinancial_data <- tq_get(assets, from = start, to=end)\n\n# Export it\nwrite.csv(financial_data,'my_first_export.csv')\n```\n:::\n",
    "supporting": [
      "replication_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}