{
  "hash": "6e89028327c9886d2067d2222ff51e82",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Case Prep - Solutions\"\nauthor: \"Lucas S. Macoris (FGV-EAESP)\"\nformat:\n  html:\n    page-layout: full\neditor: visual\n---\n\n\n\n\n# About\n\nThis exercise list is a preparation for students of the *Practical Applications in Quantitative Finance* course held at FGV-EAESP. This document serves as a refresher on key R programming concepts covered in previous lectures, reinforcing the essential skills needed for quantitative finance applications. By revisiting these foundations, you’ll ensure a solid grasp of the tools and techniques required to analyze financial data effectively. As we progress, you’ll apply these concepts to real-world finance examples, including portfolio analysis, risk assessment, and asset pricing models. Mastering these skills now will prepare you to fully engage with the practical applications we’ll explore throughout the course.\n\nTo help you structure your submission, I have provided a Quarto mock template, which is already available for you to use. This template is designed to help you seamlessly integrate your code and analysis, ensuring a clear and organized presentation of your work. Feel free to use it as a starting point to format your responses effectively. The mock template can be found in the *Data Cases* folder on *eClass®*.\n\n::: callout-important\n### Deliverable\n\nEach student is expected to deliver his/her assignment individually, although you can freely work in groups for solving the questions. A submission must be either an `.R` script or a `.qmd` (Quarto) file, ensuring that both your code and interpretations of the results are clearly presented. Whenever applicable, include concise explanations alongside your code to demonstrate your understanding of the analysis. The due date for this submission is specified on *eClass®*, so please check the platform for details.\n:::\n\n## Tech-setup\n\nBefore you start, make sure that you have your `R` session correctly configured with all the following packages by running the code below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Package names\npackages <- c(\"tidyverse\",\"tidyquant\",\"tidymodels\",\"xts\", \"glue\",\"scales\", \"ggthemes\")\n\n# Install packages not yet installed\ninstalled_packages <- packages %in% rownames(installed.packages())\n\nif (any(installed_packages == FALSE)) {\n  install.packages(packages[!installed_packages])\n}\n\n# Load all packages\ninvisible(lapply(packages, library, character.only = TRUE))\n```\n:::\n\n\n\n\n## Exercise 1\n\n**This exercise aims to gauge your skill in fetching data in `R` through different sources. You are asked to work on the following questions:**\n\n1.  Go to our *eClass®* and download the *Ibovespa_Sample.txt* file inside the *Data Cases* folder. This file contains stock price information regarding 10 publicly traded companies that are part of the Brazilian market index, *Ibovespa*.\n\n2.  Read the file into your session using the `read_delim()` function, and assign to an object called `FILE_SAMPLE`. Make sure you have the `tidyverse` package loaded. Depending on how your computer reads delimited data, you may need to set the argument `sep` to `sep=';'` or `sep=' '`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFILE_SAMPLE=read_delim('Ibovespa_Sample.txt',delim=' ')\n```\n:::\n\n\n\n\n3.  Inspect the first 10 lines of the object you have just created using the `head()` function, setting `n=10` as an argument.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFILE_SAMPLE%>%head(n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   symbol   date        open  high   low close   volume adjusted\n   <chr>    <date>     <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl>\n 1 PETR3.SA 2020-01-02  32.3  32.8  32.1  32.8  6660800     10.6\n 2 PETR3.SA 2020-01-03  33    33.2  32.0  32.0 20340400     10.4\n 3 PETR3.SA 2020-01-06  32    33.1  31.8  33.0 17549700     10.7\n 4 PETR3.SA 2020-01-07  33.0  33.0  32.4  32.6  5480400     10.6\n 5 PETR3.SA 2020-01-08  32.7  32.8  31.8  32.0 10030200     10.4\n 6 PETR3.SA 2020-01-09  32.1  32.4  31.8  32.2 15411600     10.4\n 7 PETR3.SA 2020-01-10  32.3  32.3  32.0  32.1  3867200     10.4\n 8 PETR3.SA 2020-01-13  32.2  32.3  31.9  32.1  6666500     10.4\n 9 PETR3.SA 2020-01-14  32.0  32.1  31.5  31.8  6752000     10.3\n10 PETR3.SA 2020-01-15  31.6  31.7  31.1  31.1  7113300     10.1\n```\n\n\n:::\n:::\n\n\n\n\n4.  How many rows and columns does your object have? You can use the function `dim(yourdata)` to find the exact dimensions.\n\nThis object has 7464 rows and 8 columns.\n\n5.  Alternatively, fetch the exact same stock level information directly from *Yahoo! Finance* using the `tq_get()` function. Collect the data beginning in 2020 (January $1^{st}$ until the end of 2024 (December $31^{st}$) using the `from` and `to` arguments of the `tq_get()` function. Make sure you have the `tidyquant` package loaded. Assign this data to a new object in your `R` session called `YAHOO_SAMPLE`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassets = unique(FILE_SAMPLE$symbol)\n\nYAHOO_SAMPLE=assets%>%tq_get(from='2020-01-01',to='2024-12-31')\n```\n:::\n\n\n\n\n6.  How many rows and columns does this new object have?\n\nThis object has 7464 rows and 8 columns.\n\n## Exercise 2\n\n**This exercise aims to gauge your skill on manipulating data using the `tidyverse` and the `tidyquant`. After loading these packages, provide your answers to the following questions:**\n\n1.  Using the `YAHOO_SAMPLE` you created before, create a new column, `Year`, that is defined as the year of a given timestamp found in the `date` column. You can use `year(date)` along with a `mutate` function to create this new variable. Update your `YAHOO_SAMPLE` object to make sure you have saved this variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE=YAHOO_SAMPLE%>%\n  mutate(Year=year(date))\n```\n:::\n\n\n\n\n2.  Using the updated `YAHOO_SAMPLE` object, use the `filter` function to filter for observations that occur in $2024$, use `group_by()` to group the data by `symbol`, and use the `summarize` the function to create a new variable, `avg_price`, defined as the average `adjusted` prices for each year-symbol combination. Sort your dataset by `avg_price` (highest-to-lowest), storing this result in an object called `2023_2024_Summary` and call it in your terminal. Which company had the highest price levels, and which one had the lowest?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSummary_2023_2024=YAHOO_SAMPLE%>%\n  filter(Year==2024)%>%\n  group_by(symbol)%>%\n  summarize(avg_price=mean(adjusted,na.rm=TRUE))%>%\n  arrange(avg_price)\n\nSummary_2023_2024\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  symbol   avg_price\n  <chr>        <dbl>\n1 BEEF3.SA      6.48\n2 BBDC3.SA     11.8 \n3 BRFS3.SA     19.9 \n4 ITUB3.SA     26.9 \n5 PETR3.SA     36.1 \n6 WEGE3.SA     44.8 \n```\n\n\n:::\n:::\n\n\n\n\n3.  Using the `YAHOO_SAMPLE` dataset, group your data by `symbol` and create a summary of yearly returns. To do that, first pipe the grouped data into into the `tq_transmute` function applying the `yearlyReturn`, assigning it to a new variable,`yearly_return`. Arrange your result by `date` and `yearly_return` (highest-to-lowest). Which stock had the best performance in 2020, and which stock had the worst?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE%>%\n  group_by(symbol)%>%\n  tq_transmute(select='adjusted',\n            mutate_fun = yearlyReturn,\n            col_rename = 'yearly_return')%>%\n  arrange(date,desc(yearly_return))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 3\n# Groups:   symbol [6]\n   symbol   date       yearly_return\n   <chr>    <date>             <dbl>\n 1 WEGE3.SA 2020-12-30        1.17  \n 2 PETR3.SA 2020-12-30       -0.111 \n 3 ITUB3.SA 2020-12-30       -0.119 \n 4 BEEF3.SA 2020-12-30       -0.155 \n 5 BBDC3.SA 2020-12-30       -0.228 \n 6 BRFS3.SA 2020-12-30       -0.386 \n 7 PETR3.SA 2021-12-30        0.304 \n 8 BEEF3.SA 2021-12-30        0.161 \n 9 BRFS3.SA 2021-12-30        0.0218\n10 WEGE3.SA 2021-12-30       -0.119 \n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n\n\n*WEGE3.SA* has the highest return in 2020, whereas *BRFS3.SA* had the worst.\n\n## Exercise 3\n\n**This exercise aims to gauge your skill on data visualization using the `ggplot2` package. After loading this package, provide your answers to the following questions:**\n\n1.  Using the `YAHOO_SAMPLE` object, create a `ggplot` object with the follow `aes`: the `x` component should refer to the `date` column, the `y` axis should refer to the `adjusted` column, and the `group` argument should refer to the `symbol` column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE%>%ggplot(aes(x=date,y=adjusted,group=symbol))\n```\n\n::: {.cell-output-display}\n![](data-case-prep-solutions_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n2.  Add a geometry layer to your chart using the `geom_line()` function and call it in your terminal.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE%>%\n  ggplot(aes(x=date,y=adjusted,group=symbol))+\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](data-case-prep-solutions_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n3.  Change the titles of your x and y axis, as well as chart title and subtitle using the `labs()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE%>%\n  ggplot(aes(x=date,y=adjusted,group=symbol))+\n  geom_line()+\n  labs(title='Stock prices over time',\n       subtitle='Source: Yahoo! Finance',\n       x='Date',\n       y='Adjusted Prices')\n```\n\n::: {.cell-output-display}\n![](data-case-prep-solutions_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n4.  Facet your data by each symbol using the `facet_wrap(symbol~.)` function. Set the arguments of this function in such a way that you have a 2x3 orientation (*i.e*, `nrow=2` and `ncol=3`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE%>%\n  ggplot(aes(x=date,y=adjusted,group=symbol))+\n  geom_line()+\n  labs(title='Stock prices over time',\n       subtitle='Source: Yahoo! Finance',\n       x='Date',\n       y='Adjusted Prices')+\n  facet_wrap(symbol~.,nrow=3,ncol=2)+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data-case-prep-solutions_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n5.  Apply a predefined theme using the `theme_minimal()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nYAHOO_SAMPLE%>%\n  ggplot(aes(x=date,y=adjusted,group=symbol))+\n  geom_line()+\n  labs(title='Stock prices over time',\n       subtitle='Source: Yahoo! Finance',\n       x='Date',\n       y='Adjusted Prices')+\n  facet_wrap(symbol~.,nrow=3,ncol=2)+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data-case-prep-solutions_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n6.  Save your plot using the `ggsave()` function. To use it, call `ggsave('myplot.jpg',width=10,height = 6)` to save the last plot that has been prompted to your terminal using a 10x6 resolution (in units).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave('myplot.jpg',width=10,height = 6)\n```\n:::\n",
    "supporting": [
      "data-case-prep-solutions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}